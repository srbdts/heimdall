import re

from config import INPUT_TYPE, TAG_MARKER, LOGPROB_THRESHOLD

class Word:
    def __init__(self,word,settings):
        self.logprob_threshold = settings["LOGPROB_THRESHOLD"]
        self.default_language = settings["DEFAULT_LANGUAGE"]
        if settings["INPUT_TYPE"] == "xml":
            self.node = word
            self.text = re.sub(u'ſ',u's',word.text.lower(),flags=re.UNICODE)
            if "POS" in word.attrib:
                self.tag = word.get("POS")
        else:
            if settings["TAG_MARKER"]:
                try:
                    [word,tag] = word.split(TAG_MARKER)
                    self.tag = tag
                except ValueError:
                    print("*%s*" % (word))
                    self.tag = "ERROR"
            self.node = None
            self.text = re.sub(u'ſ',u's',word.lower(),flags=re.UNICODE)
        self.transparent = False
        self.probs = {}
        self.flags = {}

    def pad(self,next_word):
        """attach following punctuation to current word"""
        if re.match(r'[?.!;, 0123456789\W]+',self.text,flags=re.UNICODE):
            self.padded_text = None
            self.transparent = True
        elif re.match(r'[?.!;, ]+',next_word,flags=re.UNICODE):
            self.padded_text = " " + self.text + next_word + " "
        else:
            self.padded_text = " " + self.text + " "

    def compute_probs(self,lm):
        """Computes the log probability that a word is generated by the provided language model"""
        prob = 0
        n_charpos = 0
        for charpos in range(len(self.padded_text)-2):
            n_charpos += 1
            trigram = self.padded_text[charpos:charpos+3]
            prob += lm.get_local_prob(trigram)
        if lm.normalize:
            prob = prob/n_charpos
        self.probs[lm.language] = prob

    def set_flags(self,language_models):
        """Compare the probability of a word across languages and flag it accordingly"""
        foreign_languages = [lm.language for lm in language_models if not lm.status == "default"]
        for language in foreign_languages:
            if self.probs[language] > self.probs[self.default_language]:
                #print("%s : %s (%s vs. %s)" % (language,self.text,self.probs[language],self.probs[self.default_language]))
                total_probs_other_languages = 0
                for control_language in self.probs:
                    if not language == control_language:
                        total_probs_other_languages += self.probs[control_language]
                if self.probs[language] - total_probs_other_languages/len(foreign_languages) >= self.logprob_threshold:
                    #print("%s : %s (%s vs. %s)" % (language,self.text,self.probs[language],self.probs[self.default_language]))
                    #print("significant")
                    self.flags[language] = 1
                else:
                    self.flags[language] = 0.5
            else:
                self.flags[language] = 0
